#include "Common.h"
#include "SSTable.h"
#include "Controller.h"
#include "BloomFilter.h"
#include "Query.h"


using namespace std;

int main() {
	srand(time(NULL));
	std::vector<std::string> names{ "Binny", "Bird", "Birdie", "Birgit", "Birgitta",
		"Blair", "Blaire", "Blake", "Blakelee", "Blakeley",
		"Blanca", "Blanch", "Blancha", "Blanche", "Blinni",
		"Blinnie", "Blinny", "Bliss", "Blisse", "Blithe" };

	std::vector<std::string> ids(20);
	for (int i = 0; i < 20; i++) {
		ids[i] = std::to_string(10000 + rand() % 90000);
	}
	
	std::vector<std::string> ages(20);
	for (int i = 0; i < 20; i++) {
		ages[i] = std::to_string(10 + rand() % 5);
	}

	std::vector<std::string> marks(20);
	for (int i = 0; i < 20; i++) {
		marks[i] = std::to_string(40 + rand() % 60);
	}

	Query qr;
	qr.createTable("student");
	for(int i = 0;i < 20;i++) {
		qr.insert(std::vector<std::string>{"name", "id", "age"},
			std::vector<std::string>{names[i], ids[i], ages[i]}).into("student");
	}
	
	qr.createTable("grade");
	for (int i = 0; i < 20; i++) {
		qr.insert(std::vector<std::string>{"id", "mark"},
			std::vector<std::string>{ids[i], marks[i]}).into("grade");
	}

	qr.select({ "name" }).from("student").getResult().print();
	qr.select({ "mark" }).from("grade").getResult().print();

	cout << "Overall false poisitive error rate of bloom filters: " << float(bfFp) / bfNg << endl;
	cout << bfNg << endl;
	return 0;
}

